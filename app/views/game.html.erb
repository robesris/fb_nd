<%= link_to "New Game", create_game_path %>

<% if @game %>
  <%= button_to "Ready", ready_path(@game.code, @me.secret), :remote => true, :id => 'ready_button', :form => { :id => 'ready_button_form'} %>

  <%= button_tag "Flip Piece", :type => 'button', :id => 'flip_button' %>
  <%= button_tag "End Turn", :type => 'button', :id => 'pass_turn_button' %>

  <%= form_for @game do |f| %>
    <div class='left'>
      <div>Phase: <%= @game.phase %></div>
      <div>Code: <%= @game.code %></div>
      <div>Player Secret: <%= @me.secret %></div>
      <input id="player_num" type="hidden" value="<%= @me.num %>" />
      <div>Player Num: <%= @me && @me.num %></div>
      
      <input id='active_player_num' type="hidden" value="<%= @game.active_player && @game.active_player.num %>" />
      <div id='active_player_text'>
        <%= (@game.active_player.num == @me.num ? "Your Turn" : "Opponent's Turn") if @me && @game.active_player %>
      </div>

      <% if Rails.env == 'test' || Rails.env == 'cucumber' %>
        <a href='#' onclick="javascript:$('#debug').val('go')" style="font-size: medium">End Pause</a>
        <input id='debug' value='stop' />
      <%- end %>

      
      <%= hidden_field_tag :player, "player#{@me.num}" %>
      <%= hidden_field_tag :my_secret, @me.secret %>
      <%= hidden_field_tag :phase, @game.phase %>

      <%= f.radio_button :active_player, :go_first %>Go first

      <%= link_to "Start", join_game_path(:game_code => @game_code, :player_secret => @player_secret) %>

      <input id='selected_id' type='hidden' value='' />
      <div id='selected_text'>(No piece selected)</div>
      <div id='prompt'> </div>

      <div>Player 1 Crystals:<span id="crystals_1"><%= @game.player1.crystals %></span></div>
      <div>Player 2 Crystals:<span id="crystals_2"><%= @game.player2.crystals %></span></div>

    </div>

    <br />
    <% 1.upto(2) do |pnum| %>
      <div id="graveyard_<%= pnum %>" name="graveyard" class="row"> </div>
    <% end %>

    <div id="keep_section" class='left'>
      <% 2.downto(1) do |pnum| %>
        <div id="keep_<%= pnum %>" name="keep" class="row keep">
          <% 1.upto(7) do |n| %>
            <div id="keep_<%= pnum %>_<%= n %>" class="keep_space left">
              <%= pnum %>K<%= n %>
              <% if piece = @game.playernum(pnum).keep[n - 1].piece %>
                <% klass = piece.class %>
                <div id='<%= piece.unique_name %>' name='<%= piece.name %>' data-owner='<%= piece.player.num %>' class='piece player<%= pnum %>'><div class='piece_player_num'><%= piece.name %></div>
                  <img src='/assets/<%= klass.to_s.downcase %>_1.gif' class='portrait' />
                  <img src='/assets/tro_compass_1.jpg' class='compass' width='25%' height='25%' />
                </div>
              <% end %>
            </div>
          <% end %>
        </div>
      <% end %>
    </div>

    <div id="board" class="left">
      <% 7.downto(1) do |row| %>
        <div class="row">
          <% 'a'.upto('g') do |col| %>
            <div class="col left">
              <%# raise "#{row} #{col}" %>
              <div id='space_<%= col + '_' + row.to_s %>' class='board_space<%= " nav_space" if (row == 1 || row == 7) && col== "d" %><%= (row.odd? && ['a', 'c', 'e', 'g'].include?(col)) || (row.even? && ['b', 'd', 'f'].include?(col)) ? ' shaded' : '' %>'>
                <%= col + '_' + row.to_s %>
                <% if piece = @game.board.space(col, row).piece %>
                  <% klass = piece.class %>
                  <div id='<%= piece.unique_name %>' name='<%= piece.name %>' data-owner='<%= piece.player.num %>' class='player<%= piece.player.num %> piece<%= klass < Piece::Nav ? ' nav' : '' %><%= klass == Piece::RedStone || klass == Piece::BlackStone ? ' stone' : '' %>'>
                    <div class='piece_player_num'>P<%= piece.player.num %></div>
                    <img src='/assets/<%= klass.to_s.downcase %>_<%= piece.player.num %>.gif' class='portrait' />
                    <% unless piece.kind_of?(Piece::Stone) %><img src='/assets/tro_compass_1.jpg' class='compass' /><% end %>
                  </div>
                <% end %>
              </div>
            </div>
          <% end %>
        </div>
      <% end %>
    </div>

    <div id="left_section" class="left">
      <div id='draft_section' class=''<% unless @game.phase == 'setup' %> style='display: none'<% end %>>
        <% @all_draft_klasses.each_with_index do |klass, i| %>
          <% unless klass == BlackStone || klass == RedStone %>
            <div id="draft_<%= klass.to_s.downcase %>" name="<%= klass.to_s %>" class="left draft_piece<%= klass < Piece::Nav ? ' nav' : '' %><%= i % 7 == 0 && false ? ' clear' : '' %>">
              <div><%= klass.to_s %></div>
              <img src='/assets/<%= klass.to_s.downcase %>_1.gif' class='portrait' />
              <img src='/assets/tro_compass_1.jpg' class='compass' />
            </div>
          <% end %>
        <% end %>
      </div>
    </div>


    
  <% end %>

<% end %>


<script>
  $(function() {
    var current_piece = null;
    var current_prompt_index = <%= @game && @game.waiting_for ? 0 : -1 %>;
    var prompts = null;

    var me = function() {
      return $('#player').val();
    };

    var opponent = function() {
      if ($('#player').val() == 'player1') {
        return 'player2';
      } else {
        return 'player1';
      }
    }

    var playernum = function(player) {
      return player == 'player1' ? 1 : 2
    }

    var occupied = function(space) {
      return space.find('div[class~="piece"]').length > 0;
    }

    var in_keep = function(piece) {
    
      //alert( piece.parent().parent().attr('name'));
      //alert( piece.parent().parent().attr('name') == 'keep');
      return piece.parent().parent().attr('name') == 'keep';
    }

    var draft = function(player, new_piece, keep_space, result) {
      // All logic should be server side - this just does stuff.
      new_piece.addClass(player).addClass('piece').removeClass('draft_piece').attr('data-owner', playernum(player)).attr('id', result['piece_unique_name']);
      console.log(new_piece);
      new_piece.css('left', 0).css('top', 0).draggable();
      if (player == 'player2') {
        new_piece.find('.portrait').attr('src', '/assets/' + new_piece.attr('name').toLowerCase() + '_2.gif');
        new_piece.find('.compass').attr('src', '/assets/' + 'tro_compass_1.jpg');

      }
      $( keep_space ).addClass( "ui-state-highlight" ).append(new_piece);
    }

    var move = function(piece, space, result) {
      space.append(piece.css('top', '0px').css('left', '0px'));
      piece.css('top', '0px').css('left', '0px');
      //piece.remove();
      //piece.appendTo(space);
      if (result) {
        $('#crystals_1').text(result['p1_crystals']);
        $('#crystals_2').text(result['p2_crystals']);
      }
    }

    var kill = function(piece_unique_name) {
      console.log("GRAVEYARD ************");
      console.log('#' + piece_unique_name);
      piece = $('#' + piece_unique_name);
      console.log(piece);
      console.log($('graveyard_' + piece.attr('data-owner')));
      $('#graveyard_' + piece.attr('data-owner')).append(piece);
    }

    var select_div = function(piece) {
      $('#selected_id').val(piece.attr('id'));
      $('#selected_text').html(piece.attr('name'));

      if (current_prompt_index >= 0) {
        prompts[current_prompt_index]['unique_name'] = piece.attr('id');
        current_prompt_index++;
        if (current_prompt_index < prompts.length) {
          show_prompt(prompts[current_prompt_index]);
        } else {
          // This was the final prompt - send the user's choices to the server
          current_prompt_index = -1;
          console.log("PROMPTS:");
          console.log(prompts);
          $.ajax({
            url: '/game/<%= @game_code %>/<%= @player_secret %>/send_prompts',
            dataType: 'json',
            data: $.param({ prompts: prompts }),
            type: 'POST',
            success: function(result) {
              if (result['status'] == 'failure') {
                console.log("FAILURE");
                // start over
                current_prompt_index = 0;
                } else {
                alert("SUCCESS");
                console.log("SUCCESS");
                current_prompt_index = -1;
                prompts = null;
              }
            }
          });
        }
      }
    }

    var show_prompt = function(prompt) {
      $('#prompt').text(prompt['message']);
    }

    var flip = function(piece, result) {
      // FLIP THE COMPASS
      var compass = piece.find('img.compass');
      compass.attr('src', compass.attr('src').replace('.jpg', '_flipped.jpg'));
      $('#crystals_1').text(result['p1_crystals']);
      $('#crystals_2').text(result['p2_crystals']);
      console.log("RESULT:");
      console.log(result);
      if(result.prompts) {
        prompts = result['prompts'];
        current_prompt_index = 0;
        show_prompt(prompts[0]);
      }
    }

    var send_flip = function(piece_id) {
      piece = $(piece_id);
      $.ajax({
        url: '/game/<%= @game_code %>/<%= @player_secret %>/flip/' + piece.attr('id'),
        success: function(result) {
          if (result.status == 'success') {
            flip(piece, result);
          }
        }
      });
    }
    $('.piece').click(function() { select_div($(this)); });
    $('#flip_button').click(function() { send_flip($('#' + $('#selected_id').val())); });

    var pass_turn = function() {
      $.ajax({
        url: '/game/<%= @game_code %>/<%= @player_secret %>/pass_turn',
        success: function(result) {
          // PASS
        }
      });
    }
    $('#pass_turn_button').click(pass_turn);

    var play_phase = function() {
      $('#phase').val('play');  // Just a temporary stopgap?  Should probably be handled in a more robust way.

      $( ".board_space" ).droppable({
        drop: function( event, ui ) {
          var piece = $(ui.draggable);
          current_piece = piece;
          var space = $('#' + this.id);
                  
          //if (!occupied(space)) {
            // summon, move, other?
            if (in_keep(piece)) {
              // handle as summon
              $.ajax({
                url: '/game/<%= @game_code %>/<%= @player_secret %>/summon/' + piece.attr('id') + '/' + this.id,
                success: function (result) {
                  if (result['status'] == 'success') {
                    //piece.draggable({ disable: true, revert: false });
                    move(piece, space, result);
                  }
                }
              });
            } else {
              // handle as move
              $.ajax({
                url: '/game/<%= @game_code %>/<%= @player_secret %>/move/' + piece.attr('id') + '/' + this.id,
                success: function (result) {
                  console.log("RESULT:");
                  console.log(result);
                  if (result['status'] == 'success') {
                    console.log(result.kill);
                    for (i = 0; i < result.kill.length; i++) {
                      console.log(result.kill[i]);
                      kill(result.kill[i]);
                    }
                    console.log("moving");
                    console.log(result);
                    move(piece, space, result);
                  }
                } 
              });
            }
          //};
          piece.css('top', '0px').css('left', '0px');
        }
      });
    }


    $('#ready_button_form').bind("ajax:complete", function(xhr, status) {
      $('#draft_section').hide();
      play_phase();
    });

    $('.draft_piece, .piece').draggable({ revert: true, snap: false });
    $( ".keep_space, .nav_space" ).droppable({
      drop: function( event, ui ) {
        var piece = $(ui.draggable);
        var space = $('#' + this.id);
                
        if (!occupied(space)) {        
          $.ajax({
            url: '/game/<%= @game_code %>/<%= @player_secret %>/draft/' + piece.attr('name') + '/' + this.id,
            success: function (result) {
              if (result['status'] == "success") {
                var new_piece = piece.clone();
                draft(me(), new_piece, space, result);
              } else {
                console.log(result);
              }
            } 
          });
        }
      } 
      
    });

    // Enable board spaces
    if ($('#phase').val() == 'play') {
      play_phase();
    }

    // Check for new events from the other player periodically
    var checkForEvents = function() {
      console.log("CURRENT:");
      console.log(current_piece);

      $.ajax({
        url: '/game/<%= @game_code %>/<%= @player_secret %>/events',
        timeout: 1990,
        success: function(events) {
          console.log(events);
          processEvents(events);
        },
        complete: function() {
          setTimeout(checkForEvents, 2000);
        }
      });
    };

    var processEvents = function(events) {
      for(i = 0; i < events.length; i++) {
        event = events[i];
        console.log(event.action);
        switch(event.action)
        {
          case 'active_player':
            var active_player_num = event.options.active_player_num
            var active_player_num_section = $('#active_player_num')
console.log(active_player_num);

            if (active_player_num != parseInt(active_player_num_section.val())) {
              active_player_num_section.val(active_player_num);
              console.log("active_player_num=" + active_player_num);
              console.log("playernumval=" + $('#player_num').val());
              if (parseInt(active_player_num) == parseInt($('#player_num').val())) {
                $('#active_player_text').text('Your Turn');
              } else {
                $('#active_player_text').text("Opponent's Turn");
              }
            }
            break;
          case 'draft':
            var draft_piece = $('#draft_' + event.options.piece_name.toLowerCase());
            var new_piece = draft_piece.clone();
            draft(opponent(), new_piece, $('#' + event.to), { piece_unique_name: event.piece_unique_name });
            break;
          case 'summon':
            var piece = $('#' + event.piece_unique_name);
            var space = $('#' + event.to);
            move(piece, space, null)
            break;
          case 'move':
            var piece = $('#' + event.piece_unique_name);
            var space = $('#' + event.to);
            if (event.options.kill) {
              for (i = 0; i < event.options.kill.length; i++) {
                console.log(event.options.kill[i]);
                kill(event.options.kill[i]);
              }
            }
            move(piece, space, event.options)
            break;
          case 'flip':
            var piece = $('#' + event.piece_unique_name);
            flip(piece, event.options);
            break;
        }
      }
    };

    <% if @game_code && @player_secret %>
      // We've just loaded the page, so clear events since we're already displaying the board state
      $.ajax({
        url: '/game/<%= @game_code %>/<%= @player_secret %>/init',
        complete: function() {
          checkForEvents();
        }
      });
    <% end %>
  });
</script>
